// REST, or representational 
//state transfer architectural style. 
//6 design principles of REST are
//uniform interface
//client server decoupling
//statelessnsess 
//cachebility
//layered system architecture
//code on demand 
//REST API communicates via HTTP to perform database ops
/**The state of a resource 
 * at any particular instant, or timestamp, is 
 * known as the
 *  resource representation. This information can be
 *  delivered to a client in virtually any
 *  format including JavaScript Object Notation (JSON) 
 * */
/**
 * Request headers and parameters are
 *  also important in REST API calls because
 *  they include important identifier information 
 * such as metadata, authorizations,
 *  uniform resource identifiers (URIs), 
 * caching, cookies and more. Request headers 
 * and response headers, along with conventional 
 * HTTP status codes, are used within 
 * well-designed REST APIs.
 */


 Sample beginner express app
 import express from 'express';
const app  = express()
app.use(express.json())
app.get("/",(req,res)=>{
    //res.send("Hello World")
    return res.json({data:"Hello World"})
})
app.get("/topics/:id",(req,res)=>{
    const dummyData = [
        {
            id:1,
            name:"Rando1"
        },
        {
            id:2,
            name:"Rando2"
        },
        {
            id:3,
            name:"Rando3"
        }
    ]
    let id = parseInt(req.params.id) 
    const topicSelect = dummyData.filter(topic => topic.id === id) //create a new array
   
   res.send(topicSelect)
})
app.listen(3000,()=>{
   console.log("Starting on port 3000");
})



//course's api project info 
//Requirement for our project

//We are a book management company

//BOOKS
//ISBN, title, pub date, language, num page, author[], category[]

//AUTHORS
//id, name, books[]

//PUBLICATIONS
//id, name, books[]

//We have to design and code an API over this .

//1. BOOKS
//We need an API :-
//To get all the books - DONE
//To get specific book - DONE
//To get a list of books based on category - DONE
//To get a list of books based on languages - UR TASK

//2. AUTHORS
//We need an API :-
//To get all the authors - DONE
//To get a specific author based on id- YOUR  TASK
//To get a list of authors based on books - DONE

//3. PUBLICATIONS
//We need an API :-
//To get all the publications
//To get a specific publication - YOUR  TASK
//To get a list of publications based on a book - YOUR TASK



//POST REQUEST
//1. ADD NEW BOOK - DONE
//2.ADD NEW PUBLICATION -
//3.ADD NEW AUTHOR

/**********PUT***********/
//Update book details if author is changed. - DONE

/*****DELETE****/
//1. Delete a book - DONE
//2. Delete author from book - UR TASK
//3. Delete author from book and related book from author -

//Schema - Blueprint of how data has to be constructed
//MongoDB is schemaless
//mongoose has schema
//mongoose - validation , relationship with other data.
//model -> document model of MongoDB
//Schema -> Model -> use them .

//MongoDB Operators -> Powerfull

//Logical Operators

//$inc => increment ,+1,+2,+3, -1 ,-2,-3
//$min => minimum
//$max => maximum
//$set => Used to set a data
//book.title ="xyz"

//$unset => removing a property from an object

//Array operators
//$push
//name = ["aradhana", "xyzzz"]
//$pop
//used to extract/remove/delete the last element
//$pull
//pull: {
//name: "xyzzz"
//}
//$addToSet => doesn't allow duplicates